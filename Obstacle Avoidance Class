//////The goal of this project is to use an ultrasonic sensor to detect obstacles in a robot car's path. 
///////When there are no obstacles detected, the car will continue to move forward. However, 
/////if an obstacle is detected, the car will stop, and a servo motor will scan left and right to locate a path without obstacles.
/////The car will then resume moving in the direction with no obstacles. By implementing classes, this project is made more readable and easier to understand.

main code

#include "motor_functions.h"

Mymotors Car1(1);

int Echo = 12;  
int Trig = 13; 

float duration; // Stores pulse duration value
float distance; // Stores calculated distance in cm

void setup() {
Car1.initServo();
  pinMode(Echo, INPUT);    
  pinMode(Trig, OUTPUT);  

}

void loop() {
  digitalWrite(Trig, LOW); 
  delayMicroseconds(2);
  digitalWrite(Trig, HIGH); //sends a pulse with the trigger pin 
  delayMicroseconds(10);
  digitalWrite(Trig, LOW);

  duration = pulseIn(Echo, HIGH); //times the duration of the pulse 
  distance = (duration/2)*0.0343;  //calculates the distance with the duration read

   Serial.print("Distance: "); //Serial print to debug

   
if (distance>=400) {  //If the distance is greater than 400cm
  Serial.println("Out of range"); //print to debug
  Serial.println("Forward"); //print to debug
  Car1.forward(); //move forward because it means there's no obstacle 
}
else {
Serial.print(distance); //print to debug

if (distance>=15){ //if the distance is greater than 15cm 
  Serial.println("Forward"); //print to debug
  Car1.forward(); //move forward
}
if (distance<15){
  Serial.println("Stop"); //print to debug
  Car1.stop(); //stop if the distance is less than 15cm
  delay(1000); //Stop during a second
  Serial.println("Left"); //print to debug
  Car1.turn1(); //move sensor to the left
  
  //Read again the distance------------------------
  digitalWrite(Trig, LOW);               
  delayMicroseconds(2);                     
  digitalWrite(Trig, HIGH);              
  delayMicroseconds(10);
  digitalWrite(Trig, LOW);
  duration = pulseIn(Echo, HIGH);
  distance = (duration/2)*0.0343;
  //-----------------------------------------------

  Car1.stop(); //This stop is just to remark the movement of the car to see if it is working well 
  delay(1000); //Stop during a second
  
  if (distance<15){ //if an object is detected on the left
  Car1.turn3(); //move sensor to the right

  //Read again the distance------------------------
  digitalWrite(Trig, LOW);
  delayMicroseconds(2);
  digitalWrite(Trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(Trig, LOW);
  duration = pulseIn(Echo, HIGH);
  distance = (duration/2)*0.0343; 
  //-----------------------------------------------

  Car1.stop(); //This stop is just to remark the movement of the car to see if it is working well 
  delay(1000); //stop during a second
  
  if (distance<15){ //if there's an object also on the right
    Car1.left();            //turn back
    delay(1350);          //turn to the left enough time to turn back
    Car1.stop();               //Stops
    delay(1000);          //Stop during a second
    Car1.turn2();    //Position the sensor to the front again
  }
  else{
    Car1.right(); //If there's no object on the right move the car to the right 
    delay(1000); //move enough time to turn 90°
    Car1.turn2();   //Position the sensor to the front again
  }
  
  }
  else{
  Car1.left(); //If there's no object on the left, move the car to the left 
  delay(1000); //move enough time to turn -90°
 Car1.turn2();  //Position the sensor to the front again
   Car1.stop(); //This stop is just to remark the movement of the car to see if it is working well 
  delay(1000); //Stop during a second
  
  if (distance<15){ //if an object is detected on the left
  Car1.turn3(); //move sensor to the right

  //Read again the distance------------------------
  digitalWrite(Trig, LOW);
  delayMicroseconds(2);
  digitalWrite(Trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(Trig, LOW);
  duration = pulseIn(Echo, HIGH);
  distance = (duration/2)*0.0343; 
  //-----------------------------------------------

  Car1.stop(); //This stop is just to remark the movement of the car to see if it is working well 
  delay(1000); //stop during a second
  
  if (distance<15){ //if there's an object also on the right
    Car1.left();            //turn back
    delay(1350);          //turn to the left enough time to turn back
    Car1.stop();               //Stops
    delay(1000);          //Stop during a second
    Car1.turn2();    //Position the sensor to the front again
  }
  else{
    Car1.right(); //If there's no object on the right move the car to the right 
    delay(1000); //move enough time to turn 90°
    Car1.turn2();   //Position the sensor to the front again
  }
  
  }
  else{
  Car1.left(); //If there's no object on the left, move the car to the left 
  delay(1000); //move enough time to turn -90°
  Car1.turn2();  //Position the sensor to the front again
  }  
  }
}
}

}



header file 

#ifndef MOTOR_FUNCTIONS_H
#define MOTOR_FUNCTIONS_H

#include <Arduino.h>
#include <Servo.h>

// Motor pin definitions

class Mymotors {
    private:
#define AIN1 8
#define PWMA 5
#define BIN1 7
#define PWMB 6
#define STB  3
Servo myservo;

    
public:


void forward();
void forward1();
void left();
void back();
void back2();
void right();
void turn1();
void turn2();
void turn3();
void stop();
void initServo();

  Mymotors(){};
  Mymotors(int x);
  //Constructor

  
  
  };

#endif


cpp file


#include "motor_functions.h"

Mymotors::Mymotors(int x){
 
  };
void Mymotors::initServo(){
   myservo.attach(10);
  myservo.write(90);// move servos to center position -> 90
  }
  
void Mymotors::forward(){  
  digitalWrite(AIN1, HIGH);
  analogWrite(PWMA, 50);
  digitalWrite(BIN1, HIGH);
  analogWrite(PWMB, 50);
  digitalWrite(STB, HIGH);
}

void Mymotors::forward1(){  
  digitalWrite(AIN1, HIGH);
  analogWrite(PWMA, 150);
  digitalWrite(BIN1, HIGH);
  analogWrite(PWMB, 150);
  digitalWrite(STB, HIGH);
}

void Mymotors::left(){
  digitalWrite(AIN1, LOW);
  analogWrite(PWMA, 50);
  digitalWrite(BIN1, HIGH);
  analogWrite(PWMB, 50);
  digitalWrite(STB, HIGH);
}

void Mymotors::back(){
  digitalWrite(AIN1, LOW);
  analogWrite(PWMA, 50);
  digitalWrite(BIN1, LOW);
  analogWrite(PWMB, 50);
  digitalWrite(STB, HIGH);
}

void Mymotors::back2(){
  digitalWrite(AIN1, LOW);
  analogWrite(PWMA, 150);
  digitalWrite(BIN1, LOW);
  analogWrite(PWMB, 150);
  digitalWrite(STB, HIGH);
}

void Mymotors::right(){
  digitalWrite(AIN1, HIGH);
  analogWrite(PWMA, 50);
  digitalWrite(BIN1, LOW);
  analogWrite(PWMB, 50);
  digitalWrite(STB, HIGH);
}

void Mymotors::stop(){
  digitalWrite(AIN1, LOW);
  analogWrite(PWMA, 0);
  digitalWrite(BIN1, LOW);
  analogWrite(PWMB, 0);
  digitalWrite(STB, LOW);
}

void Mymotors::turn1(){
  myservo.write(180);// move servos to center position -> 120°
 
  }
  void Mymotors::turn2(){
  myservo.write(90);// move servos to center position -> 120°
  
  }
  void Mymotors::turn3(){
  myservo.write(0);// move servos to center position -> 120°
 
  }
  
  



